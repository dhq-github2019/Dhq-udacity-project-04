name: backend-workflow-cd

# Triggers
on:
    # Manual trigger using the workflow_dispatch event
    workflow_dispatch:
    # Automatic trigger on pull request events targeting the main branch
    push:
        branches:
            - main
        paths: backend/**

env:
  PYTHON_VERSION: 3.10

jobs:
    linting:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code source backend
              uses: actions/checkout@v3

            - name: Cache pipenv dependencies
              uses: actions/cache@v3
              with:
                path: ~/.cache/pipenv
                key: pipenv-${{ runner.os }}-${{ hashFiles('**/Pipfile.lock') }}
                restore-keys: |
                  pipenv-${{ runner.os }}-

            - name: Set up Python
              uses: actions/setup-python@v2
              with:
                  python-version: ${{env.PYTHON_VERSION}}

            - name: Install pipenv
              run: |
                  pip install pipenv
                  
            - name: Install Dependencies
              run: |
                  pip install --upgrade pipenv
                  cd backend
                  pipenv install flake8
                  pipenv install

            - name: Run linting
              run: |
                  cd backend
                  pipenv run lint
    test:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code source backend
              uses: actions/checkout@v3

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: ${{env.PYTHON_VERSION}}

            - name: Install pipenv
              run: |
                  pip install pipenv

            - name: Install Dependencies
              run: |
                  pip install --upgrade pipenv
                  cd backend
                  pipenv install

            - name: Run test
              run: |
                  cd backend
                  pipenv run test

    build:
        runs-on: ubuntu-latest
        needs: [linting, test]
        environment: staging
        steps:
            - name: Checkout code source backend
              uses: actions/checkout@v3

            - name: Setup Python
              uses: actions/setup-python@v4
              with:
                python-version: ${{env.PYTHON_VERSION}}
      
            - name: Install pipenv
              run: |
                pip install pipenv
      
            - name: Install dependencies
              run: |
                pipenv install

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v2
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
                  aws-region: us-east-1

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2

            # - name: Docker environment setup
            #   uses: byloth/docker-setup-action@v1
            - name: Build, tag, and push docker image to Amazon ECR
              env:
                  REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  REPOSITORY: backend
                  IMAGE_TAG: ${{ github.sha }}
              run: |
                  echo "Registry: $REGISTRY"
                  echo "Repository: $REPOSITORY"
                  echo "Image Tag: $IMAGE_TAG"
                  cd backend
                  docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
                  docker images
                  docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
                
            - name: Cache Docker image
              uses: actions/cache@v3
              with:
                path: ~/docker-cache
                key: docker-${{ github.sha }}-backend
                restore-keys: |
                  docker-${{ github.sha }}-
              
            # - name: Deploy
            #   env:
            #       REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            #       REPOSITORY: backend
            #       IMAGE_TAG: ${{ github.sha }}
            #   run: |
            #       aws eks update-kubeconfig --name cluster
            #       cd backend/k8s
            #       kustomize edit set image backend=$REGISTRY/$REPOSITORY:$IMAGE_TAG
            #       kustomize build | kubectl apply -f -
    deploy:
      name: Deploy to EKS
      runs-on: ubuntu-latest
      needs: [build]
      steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
            aws-region: us-east-1
            
        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1
          with:
            mask-password: "true"

        - name: Update kubeconfig
          run: aws eks update-kubeconfig --name cluster

        - name: Run init.sh
          run: ./init.sh || true
          working-directory: ./setup

        - name: Set Docker image in Kustomize
          env:
            REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            REPOSITORY: backend
            IMAGE_TAG: latest
          run: kustomize edit set image backend=$REGISTRY/$REPOSITORY:$IMAGE_TAG
          working-directory: ./starter/backend/k8s

        - name: Apply Kubernetes resources
          run: kustomize build | kubectl apply -f -
          working-directory: ./starter/backend/k8s