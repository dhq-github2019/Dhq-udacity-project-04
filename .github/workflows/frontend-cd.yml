name: frontend-workflow-cd

# Triggers for the workflow
on:
    # Manual trigger using the workflow_dispatch event
    workflow_dispatch:
    # Automatic trigger on pull request events targeting the main branch
    push:
        branches:
            - main
        paths: frontend/**

jobs:
    linting:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code source frontend
              uses: actions/checkout@v3
            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: latest
            - name: Cache node modules
              uses: actions/cache@v2
              with:
                  path: ~/.npm
                  key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: ${{ runner.os }}-node-
            - name: Install Dependencies
              run: |
                  cd frontend
                  npm install
            - name: Run linting
              run: |
                  cd frontend
                  npm run lint
    test:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code source frontend
              uses: actions/checkout@v3
            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: latest

            - name: Cache node modules
              uses: actions/cache@v2
              with:
                  path: ~/.npm
                  key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: ${{ runner.os }}-node-

            - name: Install Dependencies

              run: |
                  cd frontend
                  npm install

            - name: Run test
              run: |
                  cd frontend
                  npm test

    build:
        runs-on: ubuntu-latest
        needs: [linting, test]
        environment: staging
        steps:
            - name: Checkout code source frontend
              uses: actions/checkout@v3
            # - name: Set up Node.js
            #   uses: actions/setup-node@v3
            #   with:
            #       node-version: latest
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v2
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: us-east-1

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2

            # - name: Docker environment setup
            #   uses: byloth/docker-setup-action@v1
            - name: Build, tag, and push docker image to Amazon ECR
              env:
                  REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  REPOSITORY: frontend
                  IMAGE_TAG: ${{ github.sha }}
              run: |
                  cd frontend
                  aws eks update-kubeconfig --name cluster
                  export EXTERNALIP=$(kubectl get svc backend -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}{"\n"}{.status.loadBalancer.ingress[0].ip}')
                  echo "xxx $EXTERNALIP"
                  docker build --build-arg REACT_APP_MOVIE_API_URL="http://$EXTERNALIP" -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
                  docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
            - name: Deploy
              env:
                  REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  REPOSITORY: frontend
                  IMAGE_TAG: ${{ github.sha }}
              run: |
                  # cd setup
                  # chmod +x init.sh
                  # ./init.sh
                  # cd ..
                  cd frontend/k8s
                  kustomize edit set image frontend=$REGISTRY/$REPOSITORY:$IMAGE_TAG
                  kustomize build | kubectl apply -f -
